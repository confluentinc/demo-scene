buildscript {
  ext {
    springBootVersion = '2.2.6.RELEASE'
    shadowPluginVersion = '5.0.0'
    kotlinVersion = '1.3.72'
    jibPluginVersion = '1.3.0'
    confluentVersion = '5.3.1'
    kafkaVersion = '2.3.1'
    lombokVersion = '1.18.8'
  }
  repositories {
    jcenter()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
  }

  dependencies {
    classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.9.1"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
    classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jibPluginVersion}"

    // kotlin compiler
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'

  sourceCompatibility = 1.8

  repositories {
    jcenter()
    maven { url 'https://packages.confluent.io/maven/' }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://jitpack.io' }
  }

  task copyRuntimeLibs(type: Copy) {
    into "build/libs-runtime"
    from configurations.runtimeClasspath
  }
}

configure(subprojects.findAll { (it.name == "streams") }) {
  apply plugin: 'application'
}

project(':core') {
  apply plugin: "com.commercehub.gradle.plugin.avro"
  apply plugin: 'java-library'

  avro {
    // stringType = "CharSequence"
  }

  dependencies {
    api 'org.apache.avro:avro:1.9.2'
    api "org.apache.kafka:kafka-clients:${kafkaVersion}"
    api 'javax.json:javax.json-api:1.1.4'
    runtimeOnly 'org.glassfish:javax.json:1.1.4'
    api "io.confluent:kafka-streams-avro-serde:${confluentVersion}"
    api ("com.github.gAmUssA:streaming-utils:-SNAPSHOT") {
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
  }

}

project(':loader') {
  apply plugin: 'groovy'
  dependencies {
    implementation project(':core')
    implementation 'org.codehaus.groovy:groovy-all:2.4.15'
    implementation 'mysql:mysql-connector-java:5.1.48'
    implementation "org.slf4j:slf4j-log4j12:1.7.25"
  }

  def env = System.getenv()

  ['AvroRatingStreamer', 'JSONRatingStreamer', 'RawRatingStreamer'].each { generatorName ->
    tasks.create(name: "streamWith${generatorName}", type: JavaExec) {
      main = generatorName
      classpath = sourceSets.main.runtimeClasspath
      args = [getConfigPath()]
    }
  }

  task loadAvroMovies(type: JavaExec) {
    main = 'AvroMovieLoader'
    classpath = sourceSets.main.runtimeClasspath
    args = [getConfigPath()]
  }

  task loadMoviesToDb(type: JavaExec) {
    main = 'SqlLoader'
    classpath = sourceSets.main.runtimeClasspath
    args = [getConfigPath()]
  }

  jar {
    manifest {
      attributes "Main-Class": ""
    }

    from {
      configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  }

}

project(':spring-web-loader') {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  dependencies {
    implementation project(':streams')

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.kafka:spring-kafka'
  }

  configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }
}

project(':streams') {
  apply plugin: 'java-library'
  mainClassName = "io.confluent.demo.StreamsDemo"

  dependencies {
    api project(':core')

    implementation "org.slf4j:slf4j-log4j12:1.7.25"
    api "org.apache.kafka:kafka-streams:${kafkaVersion}"
    implementation "io.confluent:monitoring-interceptors:${confluentVersion}"
    
    testImplementation 'junit:junit:4.12'
    testImplementation "org.apache.kafka:kafka-streams-test-utils:${kafkaVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  }

  task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
    def configPath = project.getProperty('configPath')
    args = [configPath]
  }
}

project(':spring-streams') {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  bootJar {
    mainClassName = "io.confluent.demo.SpringStreamsDemo"
  }

  dependencies {
    implementation project(':streams')

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'junit:junit'
  }

  configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }

  dependencyManagement {
    imports {
//      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
  }
}

def getConfigPath() {
  new File(project.getProperty('configPath')).absolutePath
}

project(':streams-kotlin') {
  apply plugin: "kotlin"
  apply plugin: 'kotlinx-serialization'

  dependencies {
    implementation project(':streams')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.slf4j:slf4j-log4j12:1.7.25"
  }
}
