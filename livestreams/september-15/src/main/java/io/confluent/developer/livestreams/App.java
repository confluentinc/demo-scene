/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.developer.livestreams;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import io.confluent.ksql.api.client.Client;
import io.confluent.ksql.api.client.ClientOptions;
import io.confluent.ksql.api.client.StreamedQueryResult;
import io.confluent.ksql.api.client.TopicInfo;

import static java.util.stream.IntStream.range;

public class App {

  public static void main(String[] args) throws ExecutionException, InterruptedException, MalformedURLException {

    final URL ksqldbEndpoint = new URL(System.getenv("KSQLDB_ENDPOINT"));
    final String basicAuthUserInfo = System.getenv("KSQLDB_BASIC_AUTH_USER_INFO");

    final ClientOptions clientOptions = ClientOptions.create()
        .setHost(ksqldbEndpoint.getHost())
        .setPort(ksqldbEndpoint.getPort())
        .setUseTls(true)
        .setUseAlpn(true) // should it be enabled by default?
        .setBasicAuthCredentials(basicAuthUserInfo.split(":")[0],
                                 basicAuthUserInfo.split(":")[1]);

    final Client client = Client.create(clientOptions);

    // print all topics
    final List<TopicInfo> topicInfos = client.listTopics().get();
    topicInfos.forEach(System.out::println);

    // DROP existing streams and tables
    // NOTE: `get()` - I'm using blocking API as an example
    client.executeStatement("DROP TABLE ACCOUNT;").get();
    client.executeStatement("DROP STREAM TRANSACTION_SUCCESS;").get();
    client.executeStatement("DROP STREAM TRANSACTION_STATEMENT;").get();

    String createAccountTable = "CREATE TABLE ACCOUNT (\n"
                                + "  numkey string PRIMARY KEY,\n"
                                + "  number INT,\n"
                                + "  cityAddress STRING,\n"
                                + "  countryAddress STRING,\n"
                                + "  creationDate BIGINT,\n"
                                + "  firstName STRING,\n"
                                + "  lastName STRING,\n"
                                + "  numberAddress STRING,\n"
                                + "  streetAddress STRING,\n"
                                + "  updateDate BIGINT\n"
                                + ") WITH (\n"
                                + "  KAFKA_TOPIC = 'account',\n"
                                + "  VALUE_FORMAT='JSON'\n"
                                + ");";

    String createSuccessfullyTrx = "CREATE STREAM TRANSACTION_SUCCESS (\n"
                                   + "  numkey string KEY,\n"
                                   + "  transaction STRUCT<guid STRING, account STRING, amount DOUBLE, type STRING, currency STRING, country STRING>,\n"
                                   + "  funds STRUCT<account STRING, balance DOUBLE>,\n"
                                   + "  success boolean,\n"
                                   + "  errorType STRING\n"
                                   + ") WITH (\n"
                                   + "  kafka_topic='transaction-success',\n"
                                   + "  value_format='json'\n"
                                   + ");";

    String trxStatement = "CREATE STREAM TRANSACTION_STATEMENT AS\n"
                          + "  SELECT *\n"
                          + "  FROM TRANSACTION_SUCCESS\n"
                          + "  LEFT JOIN ACCOUNT ON TRANSACTION_SUCCESS.numkey = ACCOUNT.numkey\n"
                          + "  EMIT CHANGES;";

    final Map<String, Object> properties = Map.of("auto.offset.reset", "earliest");

    client.executeStatement(createAccountTable, properties).get();
    client.executeStatement(createSuccessfullyTrx, properties).get();
    client.executeStatement(trxStatement, properties).get();

    // listing all tables
    client.listTables().get().forEach(System.out::println);

    // listing all streams
    client.listStreams().get().forEach(System.out::println);

    final StreamedQueryResult
        streamedQueryResult =
        client.streamQuery("select * from TRANSACTION_STATEMENT EMIT CHANGES;", properties).get();

    range(0, 1000)
        .mapToObj(i -> streamedQueryResult.poll()).forEach(row -> {
      if (row != null) {
        System.out.println("Received a row!");
        System.out.println("Row: " + row.values());
      } else {
        System.out.println("Query has ended.");
      }
    });
    client.close();
  }
}
